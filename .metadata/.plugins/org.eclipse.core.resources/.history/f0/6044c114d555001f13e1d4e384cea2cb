package com.example.demo;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import lombok.RequiredArgsConstructor;

@Service
public class AuthenticationService {
	@Autowired
	private EmployeeRepository employeeRepository;
	@Autowired
	private PasswordEncoder passwordEncoder;
	@Autowired
	private JwtService jwtService;
	@Autowired
	private AuthenticationManager manager;
	
	public void register(Employee employee) {
		employee.setPassword(passwordEncoder.encode(employee.getPassword()));
		employeeRepository.save(employee);
	}
	
	public String login(AuthenticationRequest request) {
		Authentication auth = manager.authenticate(new UsernamePasswordAuthenticationToken(
				request.getEmail(), request.getPassword()));
		
		if (auth.isAuthenticated())
		{
			// Find UserEntity
			/*
			Users data = userDataRepository.findByEmail(email)
					.get();
			// Invalidate all old tokens
			List<Token> tokens = tokenRepository.findAllValidTokenByUsers(data.getId());
			if (!tokens.isEmpty())
			{
				tokenRepository.saveAll(tokens.stream()
						.peek(d -> d.setValid(false))
						.collect(Collectors.toList()));
			}
			*/
			// create and return new valid token
			return jwtService.generateToken(request.getEmail());
		} else
		{
			throw new RuntimeException("Invalid Credentials");
		}
	}
	
	public void validate(String jwtToken)
	{
		jwtService.validate(jwtToken);
	}
}
